"""
|‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢| 
‚áú‚ä∑¬∞‚Ä¢‚ô™   ü¶ã”º…õ Ä÷Ö’º÷Ö…®…ñü¶ã   ‚ô™‚Ä¢¬∞‚ä∂‚áù         |           ‚áú‚ä∑¬∞‚Ä¢‚ô™   ü¶ã”º…õ Ä÷Ö’º÷Ö…®…ñü¶ã   ‚ô™‚Ä¢¬∞‚ä∂‚áù

                          GNU GENERAL PUBLIC LICENSE
                            Version 3, 29 June 2007
                            
        Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>
            Everyone is permitted to ùó∞ùóºùóΩùòÜ ùóÆùóªùó± ùó±ùó∂ùòÄùòÅùóøùó∂ùóØùòÇùòÅùó≤ verbatim copies
                of this license document, ùóØùòÇùòÅ ùó∞ùóµùóÆùóªùó¥ùó∂ùóªùó¥ ùó∂ùòÅ ùó∂ùòÄ ùóªùóºùòÅ ùóÆùóπùóπùóºùòÑùó≤ùó±.
                        ‚áú‚ä∑¬∞‚Ä¢‚ô™   ü¶ã”º…õ Ä÷Ö’º÷Ö…®…ñü¶ã   ‚ô™‚Ä¢¬∞‚ä∂‚áù,
                        Telegram Music player userbot 
                has been licensed under GNU General Public License
            ùêÇùê®ùê©ùê≤ùê´ùê¢ùê†ùê°ùê≠ (ùêÇ) ùüêùüéùüêùüè ùóõùòÜùóΩùó≤ùó©ùóºùó∂ùó±ùó¶ùóºùòÇùóπ | ùóõùòÜùóΩùó≤ùó©ùóºùó∂ùó±ùóüùóÆùóØ | ùóõùòÜùóΩùó≤ùó©ùóºùó∂ùó±ùòÄ
‚áú‚ä∑¬∞‚Ä¢‚ô™   ü¶ã”º…õ Ä÷Ö’º÷Ö…®…ñü¶ã   ‚ô™‚Ä¢¬∞‚ä∂‚áù         |           ‚áú‚ä∑¬∞‚Ä¢‚ô™   ü¶ã”º…õ Ä÷Ö’º÷Ö…®…ñü¶ã   ‚ô™‚Ä¢¬∞‚ä∂‚áù
|‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢|        
"""
from ·¥ò·¥ú Ä…¢·¥á_·¥ç·¥á·¥Ñ ú·¥Ä…¥…™Íú±·¥ç import * 
from ·¥ç·¥úÍú±…™·¥Ñ_·¥Ñ·¥è…¥·¥õ·¥á…¥·¥õ import *
from x·¥á Ä·¥èÍú∞…™ ü·¥á·¥õÍú± import *
from  ü…™ ô Ä·¥Ä Ä è import *
from  ú·¥è·¥ç·¥á import *



@Client.on_message(
filters.group
& filters.chat(CHAT_ID)
& ~filters.edited
& ~filters.via_bot
& current_vc
& filters.command("sing", prefixes="/"))
async def play_track(client, m: Message):
    Xero_Voixe = XePlay.Xero_Voixe
    playlist = XePlay.playlist   
    print("Userbot is now downloading audio and sending to server...")    
    
    
    "Check Wherether audio duration matches with the specified time mentioned in the code"
    if m.audio:
        if m.audio.duration > (MAX_MIN * 60):
            reply = await m.reply_animation(
                animation=xerolink,
                caption=f"{XEXO}üéß Audio which duration longer than {str(MAX_MIN)} min won't be automatically added to playlist"
            )
            await xeronoid_sing_purge(
                (reply,),
                PLAY_REMOVER)
            return
        m_audio = m
    elif m.reply_to_message and m.reply_to_message.audio:
        m_audio = m.reply_to_message
        if m_audio.audio.duration > (MAX_HOUR * 60 * 60):
            reply = await m.reply_animation(
                animation=xerolink,
                caption=f"{XEXO}üéß Audio which duration longer than {str(MAX_HOUR)} hours won't be added to playlist"
            )
            await xeronoid_sing_purge(
                (reply,),
                PLAY_REMOVER)
            return
    else:
        await XePlay.send_playlist()
        await m.delete()
        return
    
    
        
    
    
    "Check Wherether audio is already added in the playlist or not"
    if playlist and playlist[-1].audio.file_unique_id \
            == m_audio.audio.file_unique_id:
        reply = await m.reply_animation(
            animation=xerolink,
            caption=f"{XEXO}üéß  That music is already added to the xeronoid playlist")
        await xeronoid_sing_purge(
            (reply,),
            PLAY_REMOVER)
        return
    
    
        
    
    "Download the raw audio file and send to the server and return"
    playlist.append(m_audio)
    if len(playlist) == 1:
        m_status = await client.send_animation(
            animation=xerolink,
            duration=10,
            chat_id=LOGGER_ID,
            caption=f"{XEXO}üéß Music has been sent to the server...\nPlease wait"
        )
        
        
        m_status = await m.reply_animation(
            animation=xerolink,
            caption=f"{XEXO}üéß Please wait for xeronoid to link with userbot's server...\nGreater audio size, more time to add to server"
        )
        await download_audio(playlist[0])
        
        
        Xero_Voixe.input_filename = os.path.join(
            client.workdir,
            DEFAULT_DOWNLOAD_DIR,
            f"{playlist[0].audio.file_unique_id}.raw"
        )
        await XePlay.update_start_time()
        await m_status.delete()
        
        
        
        
        "Log the audio being transcoded and played in the group..."
        await client.send_animation(
            animation=xerolink,
            duration=10,
            chat_id=LOGGER_ID,
            caption=f"{XEXO}üéß  Xeronoid userbot has started playing:\n{playlist[0].audio.title}"
        )
        # Only userbot is going to log this event. So we need not to worry about Xeronoidbot
        
    await XePlay.send_playlist()
    for track in playlist[:2]:
        await download_audio(track)
    if not m.audio:
        await m.delete()
        
